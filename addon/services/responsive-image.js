import ResponsiveImageService from 'ember-responsive-image/services/responsive-image';
import { assert } from '@ember/debug';

/**
 * Service class to provides images generated by the responsive images package
 * with additional inline support
 *
 * @class ResponsiveImageService
 * @namespace Services
 * @module responsive-image
 * @public
 */
export default ResponsiveImageService.extend({
  /**
   * returns the inline image data as base64 encoded string
   *
   * @method getInlineImage
   * @param {String} imageName The origin name of the Image
   * @returns {String} the base64 encoded string
   * @public
   */
  getInlineImage(imageName) {
    assert(
      `There is no inline image data for image ${imageName}`,
      this.getLqip(imageName).image
    );
    return this.getLqip(imageName).image;
  },

  /**
   * returns whether there's an inline image for given image name
   *
   * @method hasInlineImage
   * @param {String} imageName The origin name of the Image
   * @returns bool true if there's an inline image
   * @public
   */
  hasInlineImage(imageName) {
    let meta = this.meta;
    return !!(
      meta[imageName] &&
      meta[imageName].lqip &&
      meta[imageName].lqip.image
    );
  },

  /**
   * returns whether this image has LQIP
   *
   * @method hasLqip
   * @param {String} imageName The origin name of the Image
   * @returns bool true if LQIP is enabled for this image
   * @public
   */
  hasLqip(imageName) {
    let meta = this.meta;
    return !!(meta[imageName] && meta[imageName].lqip);
  },

  /**
   * returns the LQIP width for this image
   *
   * @method getLqipWidth
   * @param {String} imageName The origin name of the Image
   * @returns bool true if LQIP is enabled for this image
   * @public
   */
  getLqipWidth(imageName) {
    assert(
      `There is no inline image data for image ${imageName}`,
      this.getLqip(imageName).width
    );
    return this.getLqip(imageName).width;
  },

  /**
   * returns LQIP part from meta for this image
   *
   * @method getLqip
   * @param {String} imageName The origin name of the Image
   * @returns {*} the lqip part of the meta infos
   * @private
   */
  getLqip(imageName) {
    assert(`There is no data for image ${imageName}`, this.meta.imageName);
    assert(
      `There is no lqip data for image ${imageName}`,
      this.meta[imageName].lqip
    );
    return this.meta[imageName].lqip;
  },
});
